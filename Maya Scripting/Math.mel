global float $sum;
global string $funct = "Empty";
global string $solution = "";

global proc string Add(float $numbers[])
{
    global float $sum;
    global string $funct, $solution;
    for($i=1; $i < size($numbers); $i++)
    {
        $sum += $numbers[$i];
    }
    $funct = "+";
    return $solution = $sum;
}
global proc string Subtract(float $numbers[])
{
    global float $sum;
    global string $funct, $solution;
    for($i=1; $i < size($numbers); $i++)
    {
        $sum -= $numbers[$i];
    }
    $funct = "-";
    return $solution = $sum;
}
global proc string Multiply(float $numbers[])
{
    global float $sum;
    global string $funct, $solution;
    for($i=1; $i < size($numbers); $i++)
    {
        $sum *= $numbers[$i];
    }
    $funct = "*";
    return $solution = $sum;
}
global proc string Divide(float $numbers[])
{
    global float $sum;
    global string $funct, $solution;
    for($i=1; $i < size($numbers); $i++)
    {
        $sum /= $numbers[$i];
    }
    $funct = "/";
    return $solution = $sum;
}
global proc string Power(float $numbers[])
{
    global float $sum;
    global string $funct, $solution;
    if(size($numbers) > 2)
    {
        //return "ERROR: No more than 2 nums!";
    }
    for($i=1; $i < $numbers[1]; $i++) 
    {
        $sum *= $numbers[0];
    }
    $funct = "^";
    return $solution = $sum;
}

global proc string Mean(float $numbers[])
{
    global float $sum;
    global string $funct, $solution;
    for($i=1; $i < size($numbers); $i++)
    {
        $sum += $numbers[$i];
    }
    $sum /= size($numbers);
    $funct = ",";
    return $solution = $sum;
}

global proc string Median(float $numbers[])
{
    global float $sum;
    global string $funct, $solution;
    $numbers = `sort $numbers`;
    $sum = $numbers[size($numbers)/2];
    if(size($numbers) % 2 == 0)
    {
        $sum += $numbers[(size($numbers)/2)-1];
        $sum /= 2;
    }
    $funct = ",";
    return $solution = $sum;
}

global proc string Mode(float $numbers[])
{
    global string $funct, $solution;
    float $num[], $frequency[], $highestnum[];
    int $z = 0;
    $numbers = `sort $numbers`;
    $num[0] = $numbers[0]; //saves first num to compare to next
    for($i=1; $i < size($numbers); $i++)
    {
        $frequency[$z] += 1; //counts previous number
        if($numbers[$i] != $numbers[$i-1]) //checks if current num is not same as last
        {
            $z++; //stops counting previous number
            $num[$z] = $numbers[$i]; //saves current number in new slot
        }
    }
    $frequency[$z] += 1; //counts final number
    print("\n"); //Prints results \/
    for($i=0; $i < size($frequency); $i++)
    {
        print($num[$i] + ",");
        print($frequency[$i] + "x | ");
    }
    int $highestfreq = $frequency[0];
    int $y = 1;
    $highestnum[0] = $num[0];
    for($i=1; $i < size($frequency); $i++)
    {
        if($frequency[$i] > $highestfreq)
        {
            clear($highestnum);
            $y=1;
            $highestfreq = $frequency[$i];
            $highestnum[0] = $num[$i];
        }
        else if($frequency[$i] < $highestfreq)
        {
            print("");
        }
        else if($frequency[$i] = $highestfreq)
        {
            $highestnum[$y] = $num[$i];
            $y++;
        }
    }
    $funct = ",";
    return $solution = floatArrayToString($highestnum, $funct) + "\n";
}

global proc string Math(string $type, float $numbers[])
{
    global float $sum;
    global string $funct, $solution;
    $sum = $numbers[0];
    if($type == "Add"){ Add($numbers); }
    else if($type == "Subtract"){ Subtract($numbers); }
    else if($type == "Multiply"){ Multiply($numbers); }
    else if($type == "Divide"){ Divide($numbers); }
    else if($type == "Power"){ Power($numbers); }
    else if($type == "Mean"){ Mean($numbers); }
    else if($type == "Median"){ Median($numbers); }
    else if($type == "Mode"){ Mode($numbers); }
    else if($funct == "Empty"){ return "ERROR: Invalid function: " + "\"" + $type + "\""; }
    print("\n" + $type + ": " + floatArrayToString($numbers, $funct) + " = " + $solution);
    return "Finished!";
} //Add, Subtract, Multiply, Divide, Power, Mean, Median, Mode. Examples:
Math("Add", {3,5,2});
Math("Subtract", {3,5,2});
Math("Multiply", {3,5,2});
Math("Divide", {6,2,2});
Math("Power", {8,2});
Math("Mean", {4,8,2,3,2,5,3,7});
Math("Median", {4,8,2,3,2,5,3,7});
Math("Mode", {4,8,2,3,2,5,3,7});